# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Streamlit
.streamlit/secrets.toml

# =============================================================================
# WASTE DETECTION SYSTEM - SENSITIVE FILES
# =============================================================================

# Secrets and API Keys
secrets.yaml
secrets.yml
*.key
*.pem
*.p12
*.pfx
*.crt
*.cert

# Environment files
.env
.env.local
.env.development
.env.test
.env.production
.env.staging

# API Keys and Credentials
api_keys.txt
credentials.json
service_account.json
token.json
client_secret.json

# Database files
*.db
*.sqlite
*.sqlite3
database.yml
database.yaml

# Log files (may contain sensitive information)
*.log
logs/
log/

# Model files (large and potentially sensitive)
*.pt
*.pth
*.onnx
*.rknn
*.tflite
*.pb
models/
checkpoints/
weights/

# Dataset files (large and potentially sensitive)
datasets/
data/
*.zip
*.tar.gz
*.rar
*.7z

# Results files
results/

# Training outputs
runs/
wandb/
mlruns/
tensorboard_logs/

# Cache and temporary files
.cache/
tmp/
temp/
*.tmp
*.temp

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.backup
*.old
*.orig

# Configuration files with sensitive data
config_production.yaml
config_staging.yaml
config_local.yaml
secrets_*.yaml
secrets_*.yml

# Google Colab specific
/content/
/root/
.ipynb_checkpoints/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Python cache
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/
env.bak/
venv.bak/
.venv/

# Testing
.pytest_cache/
.coverage
htmlcov/
.tox/
.nox/

# Documentation builds
docs/_build/
site/

# MyPy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# Ruff
.ruff_cache/

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Abstra
.abstra/

# PyPI configuration
.pypirc

# Local development
local_settings.py
settings_local.py

# Monitoring and analytics
sentry/
analytics/
metrics/

# Deployment
deploy/
deployment/
*.deployment

# Security
*.enc
*.encrypted
*.gpg
*.asc

# Large files
*.h5
*.hdf5
*.npz
*.npy
*.pkl
*.pickle

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Archive files
*.zip
*.tar
*.tar.gz
*.rar
*.7z

# Media files (if not needed in repo)
*.mp4
*.avi
*.mov
*.mkv
*.wmv
*.flv
*.webm
*.m4v
*.3gp
*.mp3
*.wav
*.flac
*.aac
*.ogg
*.wma

# Image files (if not needed in repo)
*.jpg
*.jpeg
*.png
*.gif
*.bmp
*.tiff
*.tif
*.svg
*.ico
*.webp

# Document files (if not needed in repo)
*.pdf
*.doc
*.docx
*.xls
*.xlsx
*.ppt
*.pptx
*.txt
*.rtf

# Readme From Cursor
CONFIGURATION_MANAGEMENT_IMPROVEMENTS.md
ERROR_HANDLING_IMPROVEMENTS.md
SECRETS_MANAGEMENT.md

# =============================================================================
# END WASTE DETECTION SYSTEM - SENSITIVE FILES
# =============================================================================
