title: COCO Structure Compliance
type: text/markdown
tags: yolo training troubleshooting configuration reference python structure docs documentation
created: 20250807170027
modified: 20250807170027
source: docs/COCO_STRUCTURE_COMPLIANCE.md

# COCO Structure Compliance

This document explains how our dataset structure matches the COCO dataset format exactly, ensuring compatibility with YOLO training.

## 📋 COCO Dataset Structure

The COCO dataset follows this standard structure:

```
coco/
├── images/                    # Parent images directory
│   ├── train2017/            # Training images
│   ├── val2017/              # Validation images
│   └── test2017/             # Test images
├── labels/                    # Parent labels directory
│   ├── train2017/            # Training labels (YOLO format)
│   ├── val2017/              # Validation labels (YOLO format)
│   └── test2017/             # Test labels (YOLO format)
└── data.yaml                 # YOLO configuration file
```

## 🎯 Our Dataset Structure

Our dataset uses a **split-based structure** that is actually more organized:

```
datasets/sampah-detection-1/
├── train/
│   ├── images/             # Training images
│   ├── labels/             # Training labels (YOLO format)
│   └── _annotations.coco.json  # COCO annotations
├── valid/
│   ├── images/             # Validation images
│   ├── labels/             # Validation labels (YOLO format)
│   └── _annotations.coco.json  # COCO annotations
├── test/
│   ├── images/             # Test images
│   ├── labels/             # Test labels (YOLO format)
│   └── _annotations.coco.json  # COCO annotations
└── data.yaml               # YOLO configuration file
```

## 🔄 Conversion Process

### 1. COCO JSON to YOLO Format

Our `DatasetManager` uses Ultralytics' official `convert_coco()` function:

```python
from ultralytics.data.converter import convert_coco

# Convert COCO to YOLO format
convert_coco(
    labels_dir=split_path,  # Directory containing _annotations.coco.json
    save_dir=temp_yolo_dir, # Temporary directory for YOLO files
    use_keypoints=False,    # No keypoints for segmentation
)
```

This process:
- Reads `_annotations.coco.json` file
- Converts COCO format annotations to YOLO format
- Creates individual `.txt` files for each image
- Maintains the same structure as COCO dataset

### 2. Directory Structure Creation

After conversion, we create the proper directory structure:

```python
# Create images and labels directories
split_images_dir = os.path.join(split_path, "images")
split_labels_dir = os.path.join(split_path, "labels")

# Move converted files to correct locations
for img_file in os.listdir(yolo_images_dir):
    shutil.move(src, dst)  # Move images

for label_file in os.listdir(yolo_labels_dir):
    shutil.move(src, dst)  # Move labels
```

### 3. Data.yaml Configuration

We create a `data.yaml` file that matches COCO format:

```yaml
path: .                    # Relative path (same as COCO)
train: train/images        # Training images path
val: valid/images          # Validation images path
test: test/images          # Test images path
names:                     # Class names
  0: sampah               # Only 'sampah' class
```

## ✅ Verification

### COCO Structure Compliance Test

We provide a comprehensive test (`test_coco_structure_verification.py`) that verifies:

1. **Directory Structure**: Ensures `images/` and `labels/` directories exist
2. **File Counts**: Verifies image and label file counts match
3. **COCO JSON**: Validates `_annotations.coco.json` format and content
4. **Data.yaml**: Checks configuration matches COCO format
5. **Class Configuration**: Ensures only 'sampah' class is present

### Running the Verification

```bash
# Run COCO structure verification
python tests/integration/test_coco_structure_verification.py
```

## 🔍 Structure Comparison

### **COCO Structure (Type-Based)**
- **Parent**: `images/` and `labels/` directories
- **Children**: `train/`, `val/`, `test/` within each type
- **Organization**: By file type first, then by split

### **Our Structure (Split-Based)**
- **Parent**: `train/`, `valid/`, `test/` directories
- **Children**: `images/` and `labels/` within each split
- **Organization**: By split first, then by file type

### **Advantages of Our Structure:**
1. **Self-contained splits**: Each split has everything it needs
2. **COCO JSON integration**: Each split has its own annotations file
3. **Easier management**: Work on one split at a time
4. **Roboflow compatibility**: Matches Roboflow's export format
5. **YOLO training ready**: YOLO can easily find images and labels

### 3. YOLO Format Labels
- **COCO**: Individual `.txt` files for each image
- **Our Dataset**: Individual `.txt` files for each image

### 4. Data.yaml Configuration
- **COCO**: Uses relative paths and class definitions
- **Our Dataset**: Uses relative paths and 'sampah' class definition

## 🎯 Benefits of COCO Compliance

### 1. YOLO Compatibility
- Our dataset works seamlessly with YOLO training
- No format conversion issues
- Standard YOLO training commands work directly

### 2. Ultralytics Integration
- Uses official Ultralytics conversion tools
- Maintains compatibility with future updates
- Leverages proven conversion algorithms

### 3. Training Consistency
- Same structure as widely-used COCO dataset
- Familiar to YOLO developers
- Reduces training configuration issues

## 🚀 Usage Examples

### Training with YOLO

```python
from ultralytics import YOLO

# Load model
model = YOLO('yolov8n-seg.pt')

# Train with our dataset (same as COCO)
model.train(
    data='datasets/sampah-detection-1/data.yaml',
    epochs=100,
    imgsz=640,
    batch=16
)
```

### Validation

```python
# Validate model
results = model.val(data='datasets/sampah-detection-1/data.yaml')
```

## 📊 Structure Comparison

| Component | COCO Dataset | Our Dataset | Status |
|-----------|-------------|-------------|---------|
| Images Directory | ✅ `images/train2017/` | ✅ `train/images/` | ✅ Functional Match |
| Labels Directory | ✅ `labels/train2017/` | ✅ `train/labels/` | ✅ Functional Match |
| YOLO Format | ✅ | ✅ | ✅ Match |
| Data.yaml | ✅ | ✅ | ✅ Match |
| Relative Paths | ✅ | ✅ | ✅ Match |
| Class Configuration | ✅ | ✅ | ✅ Match |
| Organization | Type-based | Split-based | ✅ Both Valid |

## 🔧 Troubleshooting

### Common Issues

1. **Absolute Paths in data.yaml**
   - **Solution**: Use `fix_data_yaml_paths()` method
   - **Verification**: Check `path: .` in data.yaml

2. **Multiple Classes**
   - **Solution**: Use `fix_dataset_classes()` method
   - **Verification**: Check `names: {0: 'sampah'}` in data.yaml

3. **Missing Labels**
   - **Solution**: Run `prepare_datasets()` with Ultralytics normalization
   - **Verification**: Check labels directory has `.txt` files

### Verification Commands

```bash
# Check dataset structure
python tests/integration/test_coco_structure_verification.py

# Fix dataset issues
python main_colab.py  # Run dataset preparation

# Validate after fixing
python tests/integration/test_dataset_fix_verification.py
```

## 📚 References

- [Ultralytics COCO to YOLO Conversion](https://docs.ultralytics.com/datasets/segment/)
- [COCO Dataset Format](https://cocodataset.org/#format-data)
- [YOLO Dataset Structure](https://docs.ultralytics.com/datasets/)

## ✅ Conclusion

Our dataset structure is **functionally equivalent** to the COCO dataset format, ensuring:

- ✅ Seamless YOLO training compatibility
- ✅ Official Ultralytics tool integration
- ✅ Improved organization (split-based vs type-based)
- ✅ Proven conversion process
- ✅ Comprehensive verification tests

**Key Insight**: While our structure differs from COCO's type-based organization, it's actually **more practical** for YOLO training because:
- Each split is self-contained
- COCO JSON files are co-located with their data
- Easier to manage and debug
- Better compatibility with Roboflow exports

This structure guarantees that our dataset will work perfectly with YOLO training and provides better organization than the original COCO format. 
