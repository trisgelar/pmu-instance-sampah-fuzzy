title: Test Folder Naming Convention Reorganization
type: text/vnd.tiddlywiki
tags: yolo training onnx testing configuration documentation reference cuda unit structure docs documentation
created: 20250807170027
modified: 20250807170027
source: docs/NAMING_CONVENTION_REORGANIZATION.md

# Test Folder Naming Convention Reorganization

## 🎯 **Current Issues Analysis**

### **1. Inconsistent Naming Patterns:**

#### **dataset_tools/ (Current):**
```
✅ dataset_validator.py          # Validator (keep)
✅ diagnose_dataset.py           # Diagnostic (move to diagnostic/)
❌ fix_dataset_classes.py        # Fix (move to bug_fixing/)
❌ fix_dataset_ultralytics.py    # Fix (move to bug_fixing/)
❌ fix_segmentation_labels.py    # Fix (move to bug_fixing/)
❌ fix_yolo_coordinates.py       # Fix (move to bug_fixing/)
✅ check_segmentation_format.py  # Check (move to diagnostic/)
✅ extract_and_check_dataset.py  # Check (move to diagnostic/)
✅ final_verification.py         # Verification (keep)
❌ run_dataset_fix_test.py       # Test (move to integration/)
❌ test_dataset_fix_integration.py # Test (move to integration/)
❌ test_segmentation_integration.py # Test (move to integration/)
❌ example_usage.py              # Example (move to utils/)
```

#### **fixes/ (Current):**
```
❌ test_config_fix.py            # Test (move to integration/)
❌ test_onnx_export_fix.py       # Test (move to integration/)
❌ test_sampah_normalization.py  # Test (move to integration/)
❌ test_sampah_only.py           # Test (move to integration/)
```

#### **training/ (Current):**
```
❌ enhanced_training_system.py   # System (move to modules/ or keep as tool)
❌ simple_enhanced_training.py   # System (move to modules/ or keep as tool)
✅ test_training_imports.py      # Test (keep)
```

#### **diagnostic/ (Current):**
```
✅ check_basic_structure.py      # Check (keep)
✅ check_categories.py           # Check (keep)
✅ check_cuda_versions.py        # Check (keep)
✅ check_dataset_annotations.py  # Check (keep)
✅ check_polygon_segmentation.py # Check (keep)
✅ check_yolo_label_matching.py  # Check (keep)
```

## 🔄 **Proposed Reorganization**

### **1. dataset_tools/ → dataset_validation/**

**Keep in dataset_validation/:**
```
✅ dataset_validator.py          # Core dataset validation
✅ final_verification.py         # Final verification tool
```

**Move to diagnostic/:**
```
✅ diagnose_dataset.py           # Dataset diagnosis
✅ check_segmentation_format.py  # Segmentation format check
✅ extract_and_check_dataset.py  # Dataset extraction check
```

**Move to bug_fixing/:**
```
✅ fix_dataset_classes.py        # Dataset class fixing
✅ fix_dataset_ultralytics.py    # Ultralytics dataset fixing
✅ fix_segmentation_labels.py    # Segmentation label fixing
✅ fix_yolo_coordinates.py       # YOLO coordinate fixing
```

**Move to integration/:**
```
✅ test_dataset_fix_integration.py # Dataset fix integration test
✅ test_segmentation_integration.py # Segmentation integration test
```

**Move to utils/:**
```
✅ example_usage.py              # Usage examples
```

**Move to integration/:**
```
✅ run_dataset_fix_test.py       # Dataset fix test runner
```

### **2. fixes/ → integration/**

**Move all to integration/:**
```
✅ test_config_fix.py            # Config fix test
✅ test_onnx_export_fix.py       # ONNX export fix test
✅ test_sampah_normalization.py  # Sampah normalization test
✅ test_sampah_only.py           # Sampah only test
```

### **3. training/ → training_tools/**

**Keep in training_tools/:**
```
✅ enhanced_training_system.py   # Enhanced training system
✅ simple_enhanced_training.py   # Simple training system
✅ test_training_imports.py      # Training import test
```

## 📁 **New Structure**

```
tests/
├── dataset_validation/          # Dataset validation tools
│   ├── dataset_validator.py
│   └── final_verification.py
├── diagnostic/                  # Diagnostic checks
│   ├── check_basic_structure.py
│   ├── check_categories.py
│   ├── check_cuda_versions.py
│   ├── check_dataset_annotations.py
│   ├── check_polygon_segmentation.py
│   ├── check_yolo_label_matching.py
│   ├── diagnose_dataset.py
│   ├── check_segmentation_format.py
│   └── extract_and_check_dataset.py
├── bug_fixing/                 # Bug fixing tools
│   ├── bug_detector.py
│   ├── bug_fixer.py
│   ├── bug_validator.py
│   ├── fix_dataset_classes.py
│   ├── fix_dataset_ultralytics.py
│   ├── fix_segmentation_labels.py
│   └── fix_yolo_coordinates.py
├── integration/                 # Integration tests
│   ├── test_dataset_fix_integration.py
│   ├── test_segmentation_integration.py
│   ├── test_config_fix.py
│   ├── test_onnx_export_fix.py
│   ├── test_sampah_normalization.py
│   ├── test_sampah_only.py
│   └── run_dataset_fix_test.py
├── training_tools/              # Training tools and tests
│   ├── enhanced_training_system.py
│   ├── simple_enhanced_training.py
│   └── test_training_imports.py
├── utils/                       # Utility tools
│   ├── example_usage.py
│   └── other_utils.py
├── onnx_testing/               # ONNX testing (check0-3)
├── type_checking/              # Type validation
├── validation/                 # General validation
├── unit/                       # Unit tests
└── existing_results/           # Existing results tests
```

## 🎯 **Naming Convention Rules**

### **1. Diagnostic Files (`diagnostic/`)**
- **Prefix**: `check_*` or `diagnose_*`
- **Purpose**: Identify and diagnose issues
- **Examples**: `check_cuda_versions.py`, `diagnose_dataset.py`

### **2. Bug Fixing Files (`bug_fixing/`)**
- **Prefix**: `fix_*` or `bug_*`
- **Purpose**: Fix specific issues
- **Examples**: `fix_dataset_classes.py`, `bug_detector.py`

### **3. Integration Tests (`integration/`)**
- **Prefix**: `test_*_integration.py` or `test_*_fix.py`
- **Purpose**: Test integration and fixes
- **Examples**: `test_dataset_fix_integration.py`, `test_config_fix.py`

### **4. Validation Files (`validation/` or `dataset_validation/`)**
- **Prefix**: `*_validator.py` or `*_verification.py`
- **Purpose**: Validate data and configurations
- **Examples**: `dataset_validator.py`, `final_verification.py`

### **5. Training Tools (`training_tools/`)**
- **Prefix**: `*_training_*.py` or `enhanced_*.py`
- **Purpose**: Training systems and tools
- **Examples**: `enhanced_training_system.py`, `simple_enhanced_training.py`

### **6. Utility Files (`utils/`)**
- **Prefix**: `example_*` or `*_usage.py`
- **Purpose**: Examples and utilities
- **Examples**: `example_usage.py`

## 🔧 **Implementation Plan**

### **Phase 1: Create New Directories**
1. Create `dataset_validation/`
2. Create `training_tools/`
3. Update `integration/` with moved files

### **Phase 2: Move Files**
1. Move diagnostic files to `diagnostic/`
2. Move fix files to `bug_fixing/`
3. Move integration tests to `integration/`
4. Move training tools to `training_tools/`
5. Move utilities to `utils/`

### **Phase 3: Update Documentation**
1. Update `tests/README.md`
2. Update `run_tests.py`
3. Update import statements
4. Update documentation references

### **Phase 4: Clean Up**
1. Remove old `dataset_tools/`
2. Remove old `fixes/`
3. Remove old `training/`
4. Update all references

## 📋 **Benefits of Reorganization**

### **1. Consistent Naming:**
- Clear prefixes for each category
- Easy to identify file purpose
- Logical grouping

### **2. Better Organization:**
- Related files grouped together
- Clear separation of concerns
- Easy to find specific functionality

### **3. Improved Maintainability:**
- Consistent patterns
- Clear responsibilities
- Easy to add new files

### **4. Better Documentation:**
- Clear category descriptions
- Consistent usage examples
- Logical structure

This reorganization will make the test folder much more consistent, readable, and maintainable! 🎉 
